<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/frontend/src/ui/components/tutor/TutorPostDetails.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/ui/components/tutor/TutorPostDetails.jsx" />
              <option name="originalContent" value="import React, { useState, useEffect } from 'react';&#10;import { useParams } from 'react-router-dom';&#10;import tutorPostRepository from '../../../repository/tutorPostRepository';&#10;&#10;const TutorPostDetails = () =&gt; {&#10;    const { id } = useParams();&#10;    const [post, setPost] = useState(null);&#10;    const [loading, setLoading] = useState(true);&#10;    const [error, setError] = useState(null);&#10;&#10;    useEffect(() =&gt; {&#10;        const fetchPost = async () =&gt; {&#10;            try {&#10;                setLoading(true);&#10;                const response = await tutorPostRepository.findById(id);&#10;                setPost(response.data);&#10;                setError(null);&#10;            } catch (err) {&#10;                setError(err.response?.data?.message || err.message);&#10;                console.error(&quot;Error fetching tutor post:&quot;, err);&#10;            } finally {&#10;                setLoading(false);&#10;            }&#10;        };&#10;&#10;        if (id) {&#10;            fetchPost();&#10;        }&#10;    }, [id]);&#10;&#10;    const handleDownload = async () =&gt; {&#10;        if (post?.file) {&#10;            try {&#10;                // Assuming your backend provides a download endpoint&#10;                const response = await tutorPostRepository.downloadFile(post.id);&#10;                const url = window.URL.createObjectURL(new Blob([response.data]));&#10;                const link = document.createElement('a');&#10;                link.href = url;&#10;                link.setAttribute('download', post.originalFileName || 'attachment');&#10;                document.body.appendChild(link);&#10;                link.click();&#10;                link.remove();&#10;                window.URL.revokeObjectURL(url);&#10;            } catch (err) {&#10;                console.error(&quot;Error downloading file:&quot;, err);&#10;            }&#10;        }&#10;    };&#10;&#10;    if (loading) {&#10;        return &lt;div className=&quot;loading&quot;&gt;Loading tutor post details...&lt;/div&gt;;&#10;    }&#10;&#10;    if (error) {&#10;        return &lt;div className=&quot;error&quot;&gt;Error: {error}&lt;/div&gt;;&#10;    }&#10;&#10;    if (!post) {&#10;        return &lt;div className=&quot;not-found&quot;&gt;Tutor post not found.&lt;/div&gt;;&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;tutor-post-details&quot;&gt;&#10;            &lt;div className=&quot;post-header&quot;&gt;&#10;                &lt;h1&gt;{post.title}&lt;/h1&gt;&#10;                &lt;div className=&quot;post-meta&quot;&gt;&#10;                    &lt;span className=&quot;tutor&quot;&gt;By: {post.tutorName}&lt;/span&gt;&#10;                    &lt;span className=&quot;subject&quot;&gt;Subject: {post.subject}&lt;/span&gt;&#10;                    &lt;span className=&quot;rating&quot;&gt;Rating: {post.rating}/5 ⭐&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;post-content&quot;&gt;&#10;                &lt;div className=&quot;description&quot;&gt;&#10;                    &lt;h3&gt;Description&lt;/h3&gt;&#10;                    &lt;p&gt;{post.description}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                {post.tags &amp;&amp; post.tags.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;tags-section&quot;&gt;&#10;                        &lt;h3&gt;Tags&lt;/h3&gt;&#10;                        &lt;div className=&quot;tags&quot;&gt;&#10;                            {post.tags.map((tag, index) =&gt; (&#10;                                &lt;span key={index} className=&quot;tag&quot;&gt;{tag}&lt;/span&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {post.file &amp;&amp; (&#10;                    &lt;div className=&quot;attachment-section&quot;&gt;&#10;                        &lt;h3&gt;Attachment&lt;/h3&gt;&#10;                        &lt;div className=&quot;attachment&quot;&gt;&#10;                            &lt;span className=&quot;filename&quot;&gt;{post.originalFileName}&lt;/span&gt;&#10;                            &lt;button &#10;                                onClick={handleDownload}&#10;                                className=&quot;download-btn&quot;&#10;                            &gt;&#10;                                Download&#10;                            &lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                &lt;div className=&quot;post-dates&quot;&gt;&#10;                    {post.createdAt &amp;&amp; (&#10;                        &lt;p&gt;&lt;strong&gt;Created:&lt;/strong&gt; {new Date(post.createdAt).toLocaleDateString()}&lt;/p&gt;&#10;                    )}&#10;                    {post.updatedAt &amp;&amp; post.updatedAt !== post.createdAt &amp;&amp; (&#10;                        &lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; {new Date(post.updatedAt).toLocaleDateString()}&lt;/p&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;post-actions&quot;&gt;&#10;                &lt;button &#10;                    onClick={() =&gt; window.history.back()}&#10;                    className=&quot;back-btn&quot;&#10;                &gt;&#10;                    Back to List&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default TutorPostDetails;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect } from 'react';&#10;import { useParams } from 'react-router-dom';&#10;import tutorPostRepository from '../../../repository/tutorPostRepository';&#10;&#10;const TutorPostDetails = () =&gt; {&#10;    const { id } = useParams();&#10;    const [post, setPost] = useState(null);&#10;    const [loading, setLoading] = useState(true);&#10;    const [error, setError] = useState(null);&#10;&#10;    useEffect(() =&gt; {&#10;        const fetchPost = async () =&gt; {&#10;            try {&#10;                setLoading(true);&#10;                const response = await tutorPostRepository.findById(id);&#10;                setPost(response.data);&#10;                setError(null);&#10;            } catch (err) {&#10;                setError(err.response?.data?.message || err.message);&#10;                console.error(&quot;Error fetching tutor post:&quot;, err);&#10;            } finally {&#10;                setLoading(false);&#10;            }&#10;        };&#10;&#10;        if (id) {&#10;            fetchPost();&#10;        }&#10;    }, [id]);&#10;&#10;    if (loading) {&#10;        return &lt;div className=&quot;loading&quot;&gt;Loading tutor post details...&lt;/div&gt;;&#10;    }&#10;&#10;    if (error) {&#10;        return &lt;div className=&quot;error&quot;&gt;Error: {error}&lt;/div&gt;;&#10;    }&#10;&#10;    if (!post) {&#10;        return &lt;div className=&quot;not-found&quot;&gt;Tutor post not found.&lt;/div&gt;;&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;tutor-post-details&quot;&gt;&#10;            &lt;div className=&quot;post-header&quot;&gt;&#10;                &lt;h1&gt;{post.title}&lt;/h1&gt;&#10;                &lt;div className=&quot;post-meta&quot;&gt;&#10;                    &lt;span className=&quot;tutor&quot;&gt;By: {post.tutorName}&lt;/span&gt;&#10;                    &lt;span className=&quot;subject&quot;&gt;Subject: {post.subject}&lt;/span&gt;&#10;                    &lt;span className=&quot;rating&quot;&gt;Rating: {post.rating}/5 ⭐&lt;/span&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;post-content&quot;&gt;&#10;                &lt;div className=&quot;description&quot;&gt;&#10;                    &lt;h3&gt;Description&lt;/h3&gt;&#10;                    &lt;p&gt;{post.description}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                {post.tags &amp;&amp; post.tags.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;tags-section&quot;&gt;&#10;                        &lt;h3&gt;Tags&lt;/h3&gt;&#10;                        &lt;div className=&quot;tags&quot;&gt;&#10;                            {post.tags.map((tag, index) =&gt; (&#10;                                &lt;span key={index} className=&quot;tag&quot;&gt;{tag}&lt;/span&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                &lt;div className=&quot;post-dates&quot;&gt;&#10;                    {post.createdAt &amp;&amp; (&#10;                        &lt;p&gt;&lt;strong&gt;Created:&lt;/strong&gt; {new Date(post.createdAt).toLocaleDateString()}&lt;/p&gt;&#10;                    )}&#10;                    {post.updatedAt &amp;&amp; post.updatedAt !== post.createdAt &amp;&amp; (&#10;                        &lt;p&gt;&lt;strong&gt;Updated:&lt;/strong&gt; {new Date(post.updatedAt).toLocaleDateString()}&lt;/p&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;post-actions&quot;&gt;&#10;                &lt;button &#10;                    onClick={() =&gt; window.history.back()}&#10;                    className=&quot;back-btn&quot;&#10;                &gt;&#10;                    Back to List&#10;                &lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;};&#10;&#10;export default TutorPostDetails;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/ui/components/tutor/TutorPostForm.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/ui/components/tutor/TutorPostForm.jsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import tutorPostRepository from '../../../repository/tutorPostRepository';&#10;&#10;const TutorPostForm = ({ post = null, onSuccess, onCancel }) =&gt; {&#10;    const [formData, setFormData] = useState({&#10;        title: post?.title || '',&#10;        description: post?.description || '',&#10;        tutorName: post?.tutorName || '',&#10;        subject: post?.subject || '',&#10;        rating: post?.rating || '',&#10;        tagsString: post?.tags ? post.tags.join(', ') : '',&#10;        file: null,&#10;        originalFileName: post?.originalFileName || ''&#10;    });&#10;&#10;    const [loading, setLoading] = useState(false);&#10;    const [error, setError] = useState(null);&#10;&#10;    const handleChange = (e) =&gt; {&#10;        const { name, value } = e.target;&#10;        setFormData(prev =&gt; ({&#10;            ...prev,&#10;            [name]: value&#10;        }));&#10;    };&#10;&#10;    const handleFileChange = (e) =&gt; {&#10;        const file = e.target.files[0];&#10;        if (file) {&#10;            setFormData(prev =&gt; ({&#10;                ...prev,&#10;                file: file,&#10;                originalFileName: file.name&#10;            }));&#10;        }&#10;    };&#10;&#10;    const handleSubmit = async (e) =&gt; {&#10;        e.preventDefault();&#10;        setLoading(true);&#10;        setError(null);&#10;&#10;        try {&#10;            const formDataToSend = new FormData();&#10;            formDataToSend.append('title', formData.title);&#10;            formDataToSend.append('description', formData.description);&#10;            formDataToSend.append('tutorName', formData.tutorName);&#10;            formDataToSend.append('subject', formData.subject);&#10;            formDataToSend.append('rating', formData.rating);&#10;            &#10;            // Convert tags string to array&#10;            const tags = formData.tagsString.split(',').map(t =&gt; t.trim()).filter(Boolean);&#10;            formDataToSend.append('tags', JSON.stringify(tags));&#10;&#10;            if (formData.file) {&#10;                formDataToSend.append('file', formData.file);&#10;            }&#10;&#10;            if (post) {&#10;                await tutorPostRepository.update(post.id, formDataToSend);&#10;            } else {&#10;                await tutorPostRepository.save(formDataToSend);&#10;            }&#10;&#10;            onSuccess &amp;&amp; onSuccess();&#10;        } catch (err) {&#10;            setError(err.response?.data?.message || err.message);&#10;        } finally {&#10;            setLoading(false);&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;form onSubmit={handleSubmit} className=&quot;tutor-post-form&quot;&gt;&#10;            &lt;h2&gt;{post ? 'Edit Tutor Post' : 'Create Tutor Post'}&lt;/h2&gt;&#10;            &#10;            {error &amp;&amp; &lt;div className=&quot;error&quot;&gt;{error}&lt;/div&gt;}&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;title&quot;&gt;Title:&lt;/label&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    id=&quot;title&quot;&#10;                    name=&quot;title&quot;&#10;                    value={formData.title}&#10;                    onChange={handleChange}&#10;                    required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;tutorName&quot;&gt;Tutor Name:&lt;/label&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    id=&quot;tutorName&quot;&#10;                    name=&quot;tutorName&quot;&#10;                    value={formData.tutorName}&#10;                    onChange={handleChange}&#10;                    required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;subject&quot;&gt;Subject:&lt;/label&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    id=&quot;subject&quot;&#10;                    name=&quot;subject&quot;&#10;                    value={formData.subject}&#10;                    onChange={handleChange}&#10;                    required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;rating&quot;&gt;Rating (1-5):&lt;/label&gt;&#10;                &lt;select&#10;                    id=&quot;rating&quot;&#10;                    name=&quot;rating&quot;&#10;                    value={formData.rating}&#10;                    onChange={handleChange}&#10;                    required&#10;                &gt;&#10;                    &lt;option value=&quot;&quot;&gt;Select rating&lt;/option&gt;&#10;                    &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;&#10;                    &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;&#10;                    &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;&#10;                    &lt;option value=&quot;4&quot;&gt;4&lt;/option&gt;&#10;                    &lt;option value=&quot;5&quot;&gt;5&lt;/option&gt;&#10;                &lt;/select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;description&quot;&gt;Description:&lt;/label&gt;&#10;                &lt;textarea&#10;                    id=&quot;description&quot;&#10;                    name=&quot;description&quot;&#10;                    value={formData.description}&#10;                    onChange={handleChange}&#10;                    rows=&quot;4&quot;&#10;                    required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;tagsString&quot;&gt;Tags (comma separated):&lt;/label&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    id=&quot;tagsString&quot;&#10;                    name=&quot;tagsString&quot;&#10;                    value={formData.tagsString}&#10;                    onChange={handleChange}&#10;                    placeholder=&quot;e.g. math, calculus, advanced&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;file&quot;&gt;Attachment:&lt;/label&gt;&#10;                &lt;input&#10;                    type=&quot;file&quot;&#10;                    id=&quot;file&quot;&#10;                    onChange={handleFileChange}&#10;                /&gt;&#10;                {formData.originalFileName &amp;&amp; (&#10;                    &lt;div className=&quot;current-file&quot;&gt;&#10;                        Current file: {formData.originalFileName}&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-actions&quot;&gt;&#10;                &lt;button type=&quot;submit&quot; disabled={loading}&gt;&#10;                    {loading ? 'Saving...' : (post ? 'Update' : 'Create')}&#10;                &lt;/button&gt;&#10;                {onCancel &amp;&amp; (&#10;                    &lt;button type=&quot;button&quot; onClick={onCancel}&gt;&#10;                        Cancel&#10;                    &lt;/button&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        &lt;/form&gt;&#10;    );&#10;};&#10;&#10;export default TutorPostForm;&#10;" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import tutorPostRepository from '../../../repository/tutorPostRepository';&#10;&#10;const TutorPostForm = ({ post = null, onSuccess, onCancel }) =&gt; {&#10;    const [formData, setFormData] = useState({&#10;        title: post?.title || '',&#10;        description: post?.description || '',&#10;        tutorName: post?.tutorName || '',&#10;        subject: post?.subject || '',&#10;        rating: post?.rating || '',&#10;        tagsString: post?.tags ? post.tags.join(', ') : ''&#10;    });&#10;&#10;    const [loading, setLoading] = useState(false);&#10;    const [error, setError] = useState(null);&#10;&#10;    const handleChange = (e) =&gt; {&#10;        const { name, value } = e.target;&#10;        setFormData(prev =&gt; ({&#10;            ...prev,&#10;            [name]: value&#10;        }));&#10;    };&#10;&#10;    const handleSubmit = async (e) =&gt; {&#10;        e.preventDefault();&#10;        setLoading(true);&#10;        setError(null);&#10;&#10;        try {&#10;            const dataToSend = {&#10;                title: formData.title,&#10;                description: formData.description,&#10;                tutorName: formData.tutorName,&#10;                subject: formData.subject,&#10;                rating: formData.rating,&#10;                tags: formData.tagsString.split(',').map(t =&gt; t.trim()).filter(Boolean)&#10;            };&#10;&#10;            if (post) {&#10;                await tutorPostRepository.update(post.id, dataToSend);&#10;            } else {&#10;                await tutorPostRepository.save(dataToSend);&#10;            }&#10;&#10;            onSuccess &amp;&amp; onSuccess();&#10;        } catch (err) {&#10;            setError(err.response?.data?.message || err.message);&#10;        } finally {&#10;            setLoading(false);&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;form onSubmit={handleSubmit} className=&quot;tutor-post-form&quot;&gt;&#10;            &lt;h2&gt;{post ? 'Edit Tutor Post' : 'Create Tutor Post'}&lt;/h2&gt;&#10;            &#10;            {error &amp;&amp; &lt;div className=&quot;error&quot;&gt;{error}&lt;/div&gt;}&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;title&quot;&gt;Title:&lt;/label&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    id=&quot;title&quot;&#10;                    name=&quot;title&quot;&#10;                    value={formData.title}&#10;                    onChange={handleChange}&#10;                    required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;tutorName&quot;&gt;Tutor Name:&lt;/label&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    id=&quot;tutorName&quot;&#10;                    name=&quot;tutorName&quot;&#10;                    value={formData.tutorName}&#10;                    onChange={handleChange}&#10;                    required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;subject&quot;&gt;Subject:&lt;/label&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    id=&quot;subject&quot;&#10;                    name=&quot;subject&quot;&#10;                    value={formData.subject}&#10;                    onChange={handleChange}&#10;                    required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;rating&quot;&gt;Rating (1-5):&lt;/label&gt;&#10;                &lt;select&#10;                    id=&quot;rating&quot;&#10;                    name=&quot;rating&quot;&#10;                    value={formData.rating}&#10;                    onChange={handleChange}&#10;                    required&#10;                &gt;&#10;                    &lt;option value=&quot;&quot;&gt;Select rating&lt;/option&gt;&#10;                    &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;&#10;                    &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;&#10;                    &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;&#10;                    &lt;option value=&quot;4&quot;&gt;4&lt;/option&gt;&#10;                    &lt;option value=&quot;5&quot;&gt;5&lt;/option&gt;&#10;                &lt;/select&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;description&quot;&gt;Description:&lt;/label&gt;&#10;                &lt;textarea&#10;                    id=&quot;description&quot;&#10;                    name=&quot;description&quot;&#10;                    value={formData.description}&#10;                    onChange={handleChange}&#10;                    rows=&quot;4&quot;&#10;                    required&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label htmlFor=&quot;tagsString&quot;&gt;Tags (comma separated):&lt;/label&gt;&#10;                &lt;input&#10;                    type=&quot;text&quot;&#10;                    id=&quot;tagsString&quot;&#10;                    name=&quot;tagsString&quot;&#10;                    value={formData.tagsString}&#10;                    onChange={handleChange}&#10;                    placeholder=&quot;e.g. math, calculus, advanced&quot;&#10;                /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;form-actions&quot;&gt;&#10;                &lt;button type=&quot;submit&quot; disabled={loading}&gt;&#10;                    {loading ? 'Saving...' : (post ? 'Update' : 'Create')}&#10;                &lt;/button&gt;&#10;                {onCancel &amp;&amp; (&#10;                    &lt;button type=&quot;button&quot; onClick={onCancel}&gt;&#10;                        Cancel&#10;                    &lt;/button&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        &lt;/form&gt;&#10;    );&#10;};&#10;&#10;export default TutorPostForm;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>