import React, { useState, useEffect, useContext } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import authContext from '../../../contexts/authContext.js';
import eventPostRepository from "../../../repository/eventPostRepository";
import favoriteRepository from '../../../repository/favoriteRepository';
import { toast } from 'react-toastify';

const EventPostDetails = () => {
    const { id } = useParams();
    const navigate = useNavigate();
    const { user, isAuthenticated } = useContext(authContext);
    const [eventPost, setEventPost] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isFavorite, setIsFavorite] = useState(false);

    useEffect(() => {
        const fetchEventPost = async () => {
            try {
                const response = await eventPostRepository.findById(id);
                setEventPost(response.data);
                
                if (user && user.sub) {
                    try {
                        const favoritesResponse = await favoriteRepository.getMyFavorites(user.sub);
                        const favorites = favoritesResponse.data || [];
                        setIsFavorite(favorites.some(fav => fav.postId === id || fav.postId === Number(id)));
                    } catch (favError) {
                        console.error('Error checking favorites status:', favError);
                    }
                }
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };

        fetchEventPost();
    }, [id, user]);

    const handleDelete = async () => {
        if (!isAuthenticated) {
            toast.error('–ú–æ—Ä–∞ –¥–∞ –±–∏–¥–µ—Ç–µ –Ω–∞—ò–∞–≤–µ–Ω–∏');
            navigate('/login');
            return;
        }

        if (window.confirm('–î–∞–ª–∏ —Å—Ç–µ —Å–∏–≥—É—Ä–Ω–∏ –¥–µ–∫–∞ —Å–∞–∫–∞—Ç–µ –¥–∞ –≥–æ –∏–∑–±—Ä–∏—à–µ—Ç–µ –Ω–∞—Å—Ç–∞–Ω–æ—Ç?')) {
            try {
                await eventPostRepository.delete(id);
                navigate('/event-posts');
            } catch (err) {
                if (err.response?.status === 401) {
                    toast.error('–ú–æ—Ä–∞ –¥–∞ –±–∏–¥–µ—Ç–µ –Ω–∞—ò–∞–≤–µ–Ω–∏');
                    navigate('/login');
                } else if (err.response?.status === 403) {
                    toast.error('–ù–µ–º–∞—Ç–µ –¥–æ–∑–≤–æ–ª–∞ –∑–∞ –æ–≤–∞ –¥–µ—ò—Å—Ç–≤–æ');
                } else {
                    toast.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –±—Ä–∏—à–µ—ö–µ –Ω–∞ –Ω–∞—Å—Ç–∞–Ω–æ—Ç');
                }
            }
        }
    };

    const handleChatWithCreator = async () => {
        if (!isAuthenticated) {
            toast.error('–ú–æ—Ä–∞ –¥–∞ –±–∏–¥–µ—Ç–µ –Ω–∞—ò–∞–≤–µ–Ω–∏ –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä');
            return;
        }

        if (user.username === eventPost.ownerUsername) {
            toast.info('–ù–µ –º–æ–∂–µ—Ç–µ –¥–∞ —Ä–∞–∑–≥–æ–≤–∞—Ä–∞—Ç–µ —Å–æ —Å–µ–±–µ');
            return;
        }

        try {
            navigate(`/chat/${eventPost.ownerUsername}`);
        } catch (err) {
            toast.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ—á–Ω—É–≤–∞—ö–µ –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä');
        }
    };

    const toggleFavorite = async () => {
        if (!isAuthenticated) {
            toast.error('–ú–æ—Ä–∞ –¥–∞ –±–∏–¥–µ—Ç–µ –Ω–∞—ò–∞–≤–µ–Ω–∏ –∑–∞ –¥–∞ –¥–æ–¥–∞–¥–µ—Ç–µ –≤–æ –æ–º–∏–ª–µ–Ω–∏');
            navigate('/login');
            return;
        }

        try {
            if (isFavorite) {
                const favoritesResponse = await favoriteRepository.getMyFavorites(user.id);
                const favorites = favoritesResponse.data || [];
                const favorite = favorites.find(fav => fav.postId === id || fav.postId === Number(id));

                if (favorite) {
                    await favoriteRepository.removeFavorite(user.id, favorite.id);
                    setIsFavorite(false);
                    toast.success('–û—Ç—Å—Ç—Ä–∞–Ω–µ—Ç–æ –æ–¥ –æ–º–∏–ª–µ–Ω–∏');
                }
            } else {
                await favoriteRepository.addFavorite(user.id, id);
                setIsFavorite(true);
                toast.success('–î–æ–¥–∞–¥–µ–Ω–æ –≤–æ –æ–º–∏–ª–µ–Ω–∏');
            }
        } catch (err) {
            if (err.response?.status === 401) {
                toast.error('–ú–æ—Ä–∞ –¥–∞ –±–∏–¥–µ—Ç–µ –Ω–∞—ò–∞–≤–µ–Ω–∏');
                navigate('/login');
            } else {
                toast.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∂—É—Ä–∏—Ä–∞—ö–µ –Ω–∞ –æ–º–∏–ª–µ–Ω–∏');
            }
        }
    };

    const isOwner = isAuthenticated && user && eventPost && user.username === eventPost.ownerUsername;

    if (loading) {
        return (
            <div className="container my-5">
                <div className="text-center">
                    <div className="spinner-border" role="status">
                        <span className="visually-hidden">–í—á–∏—Ç—É–≤–∞—ö–µ –¥–µ—Ç–∞–ª–∏ –∑–∞ –Ω–∞—Å—Ç–∞–Ω...</span>
                    </div>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="container my-5">
                <div className="alert alert-danger" role="alert">
                    –ì—Ä–µ—à–∫–∞: {error}
                </div>
                <Link to="/events" className="btn btn-primary">
                    –ù–∞–∑–∞–¥ –∫–æ–Ω –ª–∏—Å—Ç–∞
                </Link>
            </div>
        );
    }

    if (!eventPost) {
        return (
            <div className="container my-5">
                <div className="alert alert-warning" role="alert">
                    –ù–∞—Å—Ç–∞–Ω–æ—Ç –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω.
                </div>
                <Link to="/events" className="btn btn-primary">
                    –ù–∞–∑–∞–¥ –∫–æ–Ω –ª–∏—Å—Ç–∞
                </Link>
            </div>
        );
    }

    return (
        <div className="container" style={{ marginTop: '3rem', marginBottom: '5rem' }}>
            <div className="row justify-content-center">
                <div className="col-lg-8">
                    <div className="card">
                        <div className="card-header bg-primary text-white">
                            <h1 className="card-title mb-0">{eventPost.title}</h1>
                        </div>
                        {eventPost.imageUrl && (
                            <img 
                                src={eventPost.imageUrl} 
                                className="card-img-top" 
                                alt={eventPost.title}
                                style={{ maxHeight: '400px', objectFit: 'cover' }}
                            />
                        )}
                        <div className="card-body">
                            <div className="row mb-4">
                                <div className="col-md-6">
                                    <h5 className="text-muted">–î–µ—Ç–∞–ª–∏ –∑–∞ –Ω–∞—Å—Ç–∞–Ω</h5>
                                    <p className="mb-2">
                                        <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—ò–∞:</strong> <span>{eventPost.eventCategory}</span>
                                    </p>
                                    <p className="mb-2">
                                        <strong>–õ–æ–∫–∞—Ü–∏—ò–∞:</strong> <span>{eventPost.location}</span>
                                    </p>
                                    <p className="mb-2">
                                        <strong>–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:</strong> <span>{eventPost.organizer}</span>
                                    </p>
                                    <p className="mb-2">
                                        <strong>–¶–µ–Ω–∞:</strong>
                                        <span className="ms-2">
                                            {eventPost.isFree ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' : `${eventPost.price} –¥–µ–Ω.`}
                                        </span>
                                    </p>
                                </div>
                                <div className="col-md-6">
                                    <h5 className="text-muted">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ –∞–≤—Ç–æ—Ä–æ—Ç</h5>
                                    <p className="mb-2">
                                        <strong>–°–æ–∑–¥–∞–ª:</strong> <span>{eventPost.ownerUsername}</span>
                                    </p>
                                    <p className="mb-2">
                                        <strong>–°–æ–∑–¥–∞–¥–µ–Ω–æ:</strong> <span>{new Date(eventPost.createdAt).toLocaleDateString('mk-MK', {
                                            year: 'numeric',
                                            month: 'long',
                                            day: 'numeric',
                                            hour: '2-digit',
                                            minute: '2-digit'
                                        })}</span>
                                    </p>
                                    {isAuthenticated && user && user.username !== eventPost.ownerUsername && (
                                        <button
                                            onClick={handleChatWithCreator}
                                            className="btn btn-success btn-sm"
                                        >
                                            üí¨ –†–∞–∑–≥–æ–≤–∞—Ä–∞—ò —Å–æ {eventPost.ownerUsername}
                                        </button>
                                    )}
                                    {!isAuthenticated && (
                                        <div className="mt-2">
                                            <Link to="/login" className="btn btn-outline-primary btn-sm">
                                                –ù–∞—ò–∞–≤–µ—Ç–µ —Å–µ –∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä
                                            </Link>
                                        </div>
                                    )}
                                </div>
                            </div>

                            <div className="mb-4">
                                <h5 className="text-muted">–û–ø–∏—Å</h5>
                                <p className="lead">{eventPost.description}</p>
                            </div>

                            {eventPost.tags && eventPost.tags.length > 0 && (
                                <div className="mb-4">
                                    <h5 className="text-muted">–¢–∞–≥–æ–≤–∏</h5>
                                    <div>
                                        {eventPost.tags.map((tag, index) => (
                                            <span key={index} className="badge bg-secondary me-2">
                                                {tag}
                                            </span>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {eventPost.updatedAt && eventPost.updatedAt !== eventPost.createdAt && (
                                <div className="mb-4">
                                    <p className="text-muted small">
                                        <strong>–ü–æ—Å–ª–µ–¥–Ω–æ –∞–∂—É—Ä–∏—Ä–∞–Ω–æ:</strong> {new Date(eventPost.updatedAt).toLocaleDateString('mk-MK', {
                                            year: 'numeric',
                                            month: 'long',
                                            day: 'numeric',
                                            hour: '2-digit',
                                            minute: '2-digit'
                                        })}
                                    </p>
                                </div>
                            )}
                        </div>
                        <div className="card-footer bg-light">
                            <div className="d-flex justify-content-between">
                                <Link
                                    to="/events"
                                    className="btn btn-outline-primary"
                                >
                                    ‚Üê –ù–∞–∑–∞–¥ –∫–æ–Ω –ª–∏—Å—Ç–∞
                                </Link>
                                <div>
                                    {isOwner && (
                                        <>
                                            <Link
                                                to={`/event-posts/${eventPost.id}/edit`}
                                                className="btn btn-outline-warning me-2"
                                            >
                                                –£—Ä–µ–¥–∏
                                            </Link>
                                            <button
                                                onClick={handleDelete}
                                                className="btn btn-outline-danger me-2"
                                            >
                                                –ò–∑–±—Ä–∏—à–∏
                                            </button>
                                        </>
                                    )}
                                    {isAuthenticated && (
                                        <button
                                            className={`btn ${isFavorite ? 'btn-danger' : 'btn-outline-danger'}`}
                                            onClick={toggleFavorite}
                                        >
                                            {isFavorite
                                                ? <><i className="bi bi-heart-fill"></i> –û—Ç—Å—Ç—Ä–∞–Ω–∏ –æ–¥ –æ–º–∏–ª–µ–Ω–∏</>
                                                : <><i className="bi bi-heart"></i> –î–æ–¥–∞—ò –≤–æ –æ–º–∏–ª–µ–Ω–∏</>
                                            }
                                        </button>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default EventPostDetails;